from PyQt5.QtCore import pyqtSignal, QByteArray, QObject, QPoint, QPointF, QRect, QRectF, QRect, QUuid, QVariant
from PyQt5.QtGui import QColor, QIcon, QImage, QTransform
from PyQt5.QtWidgets import QDockWidget, QMainWindow, QAction

class Canvas: ...
class CloneLayer: ...
class ColorizeMask: ...
class DockPosition: ...
class Document: ...
class FileLayer: ...
class FillLayer: ...
class Filter: ...
class FilterLayer: ...
class FilterMask: ...
class GroupLayer: ...
class InfoObject: ...
class Krita: ...
class Node: ...
class Resource: ...
class Selection: ...
class SelectionMask: ...
class Shape: ...
class TransformMask: ...
class TransparencyMask: ...
class VectorLayer: ...
class View: ...
class Window: ...

class DockWidget(QDockWidget):
    canvas: pyqtSignal
    canvasChanged: pyqtSignal
    setCanvas: pyqtSignal
    unsetCanvas: pyqtSignal

class DockWidgetFactoryBase:
    def defaultDockPosition(self) -> DockPosition: ...
    def id(self) -> str: ...
    
class Extension(QObject):
    def createActions(window: Window) -> None: ...
    def setup(self) -> None: ...

class Notifier(QObject):
    active: bool
    
    applicationClosing: pyqtSignal
    configurationChanged: pyqtSignal
    imageClosed: pyqtSignal
    imageCreated: pyqtSignal
    imageSaved: pyqtSignal
    viewClosed: pyqtSignal
    viewCreated: pyqtSignal
    windowCreated: pyqtSignal
    windowIsBeingCreated: pyqtSignal
    
    def active(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...

class Krita:
    def action(self, name: str) -> QAction: ...
    def actions(self) -> list[QAction]: ...
    def activeDocument(self) -> Document: ...
    def activeWindow(self) -> Window: ...
    def addDockWidgetFactory(self, factory: DockWidgetFactoryBase) -> None: ...
    def addExtension(self, extension: Extension) -> None: ...
    def addProfile(self, profilePath: str) -> bool: ...
    def batchmode(self) -> bool: ...
    def colorDepths(self, colorModel: str) -> list[str]: ...
    def colorModels(self) -> list[str]: ...
    def createDocument(self, width: int, height: int, name: str, colorModel: str, colorDepth: str, profile: str, resolution: float) -> Document: ...
    def dockers(self) -> list[QDockWidget]: ...
    def documents(self) -> list[Document]: ...
    def extensions(self) -> list[Extension]: ...
    def filter(self, name: str) -> Filter: ...
    def filters(self) -> list[str]: ...
    def filterStrategies(self) -> list[str]: ...
    def fromVariant(self, v: QVariant) -> QObject: ...
    def getAppDataLocation(self) -> str: ...
    def icon(self, iconName: str) -> QIcon: ...
    def instance(self) -> Krita: ...
    def krita_i18n(self, text: str) -> str: ...
    def krita_i18nc(self, context: str, text: str) -> str: ...
    def notifier(self) -> Notifier: ...
    def openDocument(self, filename: str) -> Document: ...
    def openWindow(self) -> Window: ...
    def profiles(self, colorModel: str, colorDepth: str) -> list[str]: ...
    def readSetting(self, group: str, name: str, defaultValue: str) -> str: ...
    def recentDocuments(self) -> list[str]: ...
    def resources(self, type: str) -> dict[str, Resource]: ...
    def setActiveDocument(self, value: Document) -> None: ...
    def setBatchmode(self, value: bool) -> None: ...
    def version(self) -> str: ...
    def views(self) -> list[View]: ...
    def windows(self) -> list[Window]: ...
    def writeSetting(self, group: str, name: str, value: str) -> None: ...

class Canvas:
    def levelOfDetailMode(self) -> bool: ...
    def mirror(self) -> bool: ...
    def resetRotation(self) -> None: ...
    def resetZoom(self) -> None: ...
    def rotation(self) -> float: ...
    def setLevelOfDetailMode(self, enable: bool) -> None: ...
    def setMirror(self, value: bool) -> None: ...
    def setRotation(self, angle: float) -> None: ...
    def setWrapAroundMode(self, enable: bool) -> None: ...
    def setZoomLevel(self, value: float) -> None: ...
    def view(self) -> View: ...
    def wrapAroundMode(self) -> bool: ...
    def zoomLevel(self) -> float: ...

class Channel:
    def bounds() -> QRect: ...
    def channelSize() -> int: ...
    def name() -> str: ...
    def pixelData(rect: QRect) -> QByteArray: ...
    def position() -> int: ...
    def setPixelData(value: QByteArray, rect: QRect) -> None: ...
    def setVisible(value: bool) -> None: ...
    def visible() -> bool: ...

class Document:
    def activeNode(self) -> Node: ...
    def animationLength(self) -> int: ...
    def annotation(self, type: str) -> QByteArray: ...
    def annotationDescription(type: str) -> str: ...
    def annotationTypes(self) -> list: ...
    def backgroundColor(self) -> QColor: ...
    def batchmode(self) -> bool: ...
    def bounds(self) -> QRect: ...
    def clone(self) -> Document: ...
    def close(self) -> bool: ...
    def colorDepth(self) -> str: ...
    def colorModel(self) -> str: ...
    def colorProfile(self) -> str: ...
    def createCloneLayer(self, name: str, source: Node) -> CloneLayer: ...
    def createColorizeMask(self, name: str) -> ColorizeMask: ...
    def createFileLayer(self, name: str, fileName: str, scalingMethod: str, scalingFilter: str = "Bicubic") -> FileLayer: ...
    def createFillLayer(self, name: str, generatorName: str, configuration: InfoObject, selection: Selection) -> FillLayer: ...
    def createFilterLayer(self, name: str, filter: Filter, selection: Selection) -> FilterLayer: ...
    def createFilterMask(self, name: str, filter: Filter, selection_source: Node) -> FilterMask: ...
    def createFilterMask(self, name: str, filter: Filter, selection: Selection) -> FilterMask: ...
    def createGroupLayer(self, name: str) -> GroupLayer: ...
    def createNode(self, name: str, nodeType: str) -> Node: ...
    def createSelectionMask(self, name: str) -> SelectionMask: ...
    def createTransformMask(self, name: str) -> TransformMask: ...
    def createTransparencyMask(self, name: str) -> TransparencyMask: ...
    def createVectorLayer(self, name: str) -> VectorLayer: ...
    def crop(self, x: int, y: int, w: int, h: int) -> None: ...
    def currentTime(self) -> int: ...
    def documentInfo(self) -> str: ...
    def exportImage(self, filename: str, exportConfiguration: InfoObject) -> bool: ...
    def fileName(self) -> str: ...
    def flatten(self) -> None: ...
    def framesPerSecond(self) -> int: ...
    def fullClipRangeEndTime(self) -> int: ...
    def fullClipRangeStartTime(self) -> int: ...
    def height(self) -> int: ...
    def importAnimation(self, files: list[str], firstFrame: int, step: int) -> bool: ...
    def lock(self) -> None: ...
    def modified(self) -> bool: ...
    def name(self) -> str: ...
    def nodeByName(self, name: str) -> Node: ...
    def nodeByUniqueID(self, id: QUuid) -> Node: ...
    def pixelData(self, x: int, y: int, w: int, h: int) -> QByteArray: ...
    def playBackEndTime(self) -> int: ...
    def playBackStartTime(self) -> int: ...
    def projection(self, x: int = 0, y: int =0, w: int = 0, h: int = 0) -> QImage: ...
    def refreshProjection(self) -> None: ...
    def removeAnnotation(self, type: str) -> None: ...
    def resizeImage(self, x: int, y: int, w: int, h: int) -> None: ...
    def resolution(self) -> int: ...
    def rootNode(self) -> Node: ...
    def rotateImage(self, radians: float) -> None: ...
    def save(self) -> bool: ...
    def saveAs(self, filename: str) -> bool: ...
    def scaleImage(self, w: int, h: int, xres: int, yres: int, strategy: str) -> None: ...
    def selection(self) -> Selection: ...
    def setActiveNode(self, value: Node) -> None: ...
    def setAnnotation(self, type: str, description: str, annotation: QByteArray) -> None: ...
    def setBackgroundColor(self, color: QColor) -> bool: ...
    def setBatchmode(self, value: bool) -> None: ...
    def setColorProfile(self, colorProfile: str) -> bool: ...
    def setColorSpace(self, colorModel: str, colorDepth: str, colorProfile: str) -> bool: ...
    def setCurrentTime(self, time: int) -> None: ...
    def setDocumentInfo(self, document: str) -> None: ...
    def setFileName(self, value: str) -> None: ...
    def setFramesPerSecond(self, fps: int) -> None: ...
    def setFullClipRangeEndTime(self, endTime: int) -> None: ...
    def setFullClipRangeStartTime(self, startTime: int) -> None: ...
    def setGuidesLocked(self, locked: bool) -> None: ...
    def setGuidesVisible(self, visible: bool) -> None: ...
    def setHeight(self, value: int) -> None: ...
    def setHorizontalGuides(self, lines: list) -> None: ...
    def setModified(self, modified: bool) -> None: ...
    def setName(self, value: str) -> None: ...
    def setPlayBackRange(self, start: int, stop: int) -> None: ...
    def setResolution(self, value: int) -> None: ...
    def setSelection(self, value: Selection) -> None: ...
    def setVerticalGuides(self, lines: list) -> None: ...
    def setWidth(self, value: int) -> None: ...
    def setXOffset(self, x: int) -> None: ...
    def setXRes(self, xRes: float) -> None: ...
    def setYOffset(self, y: int) -> None: ...
    def setYRes(self, yRes: float) -> None: ...
    def shearImage(self, angleX: float, angleY: float) -> None: ...
    def thumbnail(self, w: int, h: int) -> QImage: ...
    def topLevelNodes(self) -> list[Node]: ...
    def tryBarrierLock(self) -> bool: ...
    def unlock(self) -> None: ...
    def waitForDone(self) -> None: ...
    def width(self) -> int: ...
    def xOffset(self) -> int: ...
    def xRes(self) -> float: ...
    def yOffset(self) -> int: ...
    def yRes(self) -> float: ...

class Filter(QObject):
    collectionIdChanged: pyqtSignal
    nameChanged: pyqtSignal
    tagsChanged: pyqtSignal
    
    def removeTag(self, tagName: str) -> None: ...
    def reset(self) -> None: ...
    def setCollectionId(self, collectionId: int) -> None: ...
    def setName(self, name: str) -> None: ...
    def setTags(self, tags: list[str]) -> None: ...
    def toggleFilterTag(self, tagName: str) -> None: ...

class InfoObject(QObject):
    def property(self, key: str) -> QVariant: ...
    def setProperty(self, key: str, value: QVariant) -> None: ...

class ManagedColor(QObject):
    def colorDepth(self) -> str: ...
    def colorForCanvas(self, canvas: Canvas) -> QColor: ...
    def colorModel(self) -> str: ...
    def colorProfile(self) -> str: ...
    def components(self) -> list[float]: ...
    def componentsOrdered(self) -> list[float]: ...
    def fromXML(self, xml: str) -> None: ...
    def setColorProfile(self, colorProfile: str) -> bool: ...
    def setColorSpace(self, colorModel: str, colorDepth: str, colorProfile: str) -> bool: ...
    def setComponents(self, values: list[float]) -> None: ...
    def toQString(self) -> str: ...
    def toXML(self) -> str: ...

class Resource(QObject):
    def filename(self) -> str: ...
    def image(self) -> QImage: ...
    def name(self) -> str: ...
    def setImage(self, image: QImage) -> None: ...
    def setName(self, name: str) -> None: ...
    def type(self) -> str: ...

class Selection(QObject):
    def add(self, selection: Selection) -> None: ...
    def border(self, xRadius: int, yRadius: int) -> None: ...
    def clear(self) -> None: ...
    def contract(self, value: int) -> None: ...
    def copy(self, node: Node) -> None: ...
    def cut(self, node: Node) -> None: ...
    def dilate(self) -> None: ...
    def duplicate(self) -> Selection: ...
    def erode(self) -> None: ...
    def feather(self, radius: int) -> None: ...
    def grow(self, xradius: int, yradius: int) -> None: ...
    def height(self) -> int: ...
    def intersect(self, selection: Selection) -> None: ...
    def invert(self) -> None: ...
    def move(self, x: int, y: int) -> None: ...
    def paste(self, destination: Node, x: int, y: int) -> None: ...
    def pixelData(self, x: int, y: int, w: int, h: int) -> QByteArray: ...
    def replace(self, selection: Selection) -> None: ...
    def resize(self, w: int, h: int) -> None: ...
    def select(self, x: int, y: int, w: int, h: int, value: int) -> None: ...
    def selectAll(self, node: Node, value: int) -> None: ...
    def setPixelData(self, value: QByteArray, x: int, y: int, w: int, h: int) -> None: ...
    def shrink(self, xRadius: int, yRadius: int, edgeLock: bool) -> None: ...
    def smooth(self) -> None: ...
    def subtract(self, selection: Selection) -> None: ...
    def symmetricdifference(self, selection: Selection) -> None: ...
    def width(self) -> int: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class Shape(QObject):
    def absoluteTransformation(self) -> QTransform: ...
    def boundingBox(self) -> QRectF: ...
    def deselect(self) -> None: ...
    def geometryProtected(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def name(self) -> str: ...
    def parentShape(self) -> Shape: ...
    def position(self) -> QPointF: ...
    def remove(self) -> bool: ...
    def select(self) -> None: ...
    def selectable(self) -> bool: ...
    def setGeometryProtected(self, protect: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPosition(self, point: QPointF) -> None: ...
    def setSelectable(self, selectable: bool) -> None: ...
    def setTransformation(self, matrix: QTransform) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setZIndex(self, zindex: int) -> None: ...
    def toSvg(self, prependStyles: bool = False, stripTextMode: bool = True) -> str: ...
    def transformation(self) -> QTransform: ...
    def type(self) -> str: ...
    def update(self) -> None: ...
    def updateAbsolute(self, box: QRectF) -> None: ...
    def visible(self) -> bool: ...
    def zIndex(self) -> int: ...

class View(QObject):
    def activateResource(self, resource: Resource) -> None: ...
    def backgroundColor(self) -> ManagedColor: ...
    def brushRotation(self) -> float: ...
    def brushSize(self) -> float: ...
    def canvas(self) -> Canvas: ...
    def currentBlendingMode(self) -> str: ...
    def currentBrushPreset(self) -> Resource: ...
    def currentGradient(self) -> Resource: ...
    def currentPattern(self) -> Resource: ...
    def document(self) -> Document: ...
    def flakeToCanvasTransform(self) -> QTransform: ...
    def flakeToDocumentTransform(self) -> QTransform: ...
    def flakeToImageTransform(self) -> QTransform: ...
    def foregroundColor(self) -> ManagedColor: ...
    def HDRExposure(self) -> float: ...
    def HDRGamma(self) -> float: ...
    def paintingFlow(self) -> float: ...
    def paintingOpacity(self) -> float: ...
    def selectedNodes(self) -> list[Node]: ...
    def setBackGroundColor(self, color: ManagedColor) -> None: ...
    def setBrushRotation(self, brushRotation: float) -> None: ...
    def setBrushSize(self, brushSize: float) -> None: ...
    def setCurrentBlendingMode(self, blendingMode: str) -> None: ...
    def setCurrentBrushPreset(self, resource: Resource) -> None: ...
    def setCurrentGradient(self, resource: Resource) -> None: ...
    def setCurrentPattern(self, resource: Resource) -> None: ...
    def setDocument(self, document: Document) -> None: ...
    def setForeGroundColor(self, color: ManagedColor) -> None: ...
    def setHDRExposure(self, exposure: float) -> None: ...
    def setHDRGamma(self, gamma: float) -> None: ...
    def setPaintingFlow(self, flow: float) -> None: ...
    def setPaintingOpacity(self, opacity: float) -> None: ...
    def setVisible(self) -> None: ...
    def showFloatingMessage(self, message: str, icon: QIcon, timeout: int, priority: int) -> None: ...
    def visible(self) -> bool: ...
    def window(self) -> Window: ...

class Window(QObject):
    activeViewChanged: pyqtSignal
    themeChanged: pyqtSignal
    windowClosed: pyqtSignal
    
    def activate(self) -> None: ...
    def activeView(self) -> View: ...
    def addView(self, document: Document) -> View: ...
    def createAction(self, id: str, text: str, menuLocation: str) -> QAction: ...
    def dockers(self) -> list[QDockWidget]: ...
    def qwindow(self) -> QMainWindow: ...
    def showView(self, view: View) -> None: ...
    def views(self) -> list[View]: ...

class Node(QObject):
    def addChildNode(child: Node, above: Node) -> bool: ...
    def alphaLocked() -> bool: ...
    def animated() -> bool: ...
    def blendingMode() -> str: ...
    def bounds() -> QRect: ...
    def channels() -> list[Channel]: ...
    def childNodes() -> list[Node]: ...
    def clone() -> Node: ...
    def collapsed() -> bool: ...
    def colorDepth() -> str: ...
    def colorLabel() -> int: ...
    def colorModel() -> str: ...
    def colorProfile() -> str: ...
    def cropNode(x: int, y: int, w: int, h: int) -> None: ...
    def duplicate() -> Node: ...
    def enableAnimation() -> None: ...
    def findChildNodes(name: str, recursive: bool = False, partialMatch: bool = False, type: str = '', colorLabelIndex: int = 0) -> list[Node]: ...
    def hasExtents() -> bool: ...
    def hasKeyframeAtTime(frameNumber: int) -> bool: ...
    def icon() -> QIcon: ...
    def index() -> int: ...
    def inheritAlpha() -> bool: ...
    def isPinnedToTimeline() -> bool: ...
    def layerStyleToAsl() -> str: ...
    def locked() -> bool: ...
    def mergeDown() -> Node: ...
    def move(x: int, y: int) -> None: ...
    def name() -> str: ...
    def opacity() -> int: ...
    def parentNode() -> Node: ...
    def pixelData(x: int, y: int, w: int, h: int) -> QByteArray: ...
    def pixelDataAtTime(x: int, y: int, w: int, h: int, time: int) -> QByteArray: ...
    def position() -> QPoint: ...
    def projectionPixelData(x: int, y: int, w: int, h: int) -> QByteArray: ...
    def remove() -> bool: ...
    def removeChildNode(child: Node) -> bool: ...
    def rotateNode(radians: float) -> None: ...
    def save(filename: str, xRes: float, yRes: float, exportConfiguration: InfoObject, exportRect: QRect = QRect()) -> bool: ...
    def scaleNode(origin: QPointF, width: int, height: int, strategy: str) -> None: ...
    def setAlphaLocked(value: bool) -> None: ...
    def setBlendingMode(value: str) -> None: ...
    def setChildNodes(nodes: list[Node]) -> None: ...
    def setCollapsed(collapsed: bool) -> None: ...
    def setColorLabel(index: int) -> None: ...
    def setColorProfile(colorProfile: str) -> bool: ...
    def setColorSpace(colorModel: str, colorDepth: str, colorProfile: str) -> bool: ...
    def setInheritAlpha(value: bool) -> None: ...
    def setLayerStyleFromAsl(asl: str) -> bool: ...
    def setLocked(value: bool) -> None: ...
    def setName(name: str) -> None: ...
    def setOpacity(value: int) -> None: ...
    def setPinnedToTimeline(pinned: bool) -> None: ...
    def setPixelData(value: QByteArray, x: int, y: int, w: int, h: int) -> bool: ...
    def setVisible(visible: bool) -> None: ...
    def shearNode(angleX: float, angleY: float) -> None: ...
    def thumbnail(w: int, h: int) -> QImage: ...
    def type() -> str: ...
    def uniqueId() -> QUuid: ...
    def visible() -> bool: ...
    
class CloneLayer(Node):
    def setSourceNode(self, node: Node) -> None: ...
    def sourceNode(self) -> Node: ...
    def type(self) -> str: ...

class ColorizeMask(Node):
    def cleanUpAmount(self) -> float: ...
    def edgeDetectionSize(self) -> float: ...
    def editKeyStrokes(self) -> bool: ...
    def initializeKeyStrokeColors(self, colors: list[ManagedColor], transparentIndex: int = -1) -> None: ...
    def keyStrokePixelData(self, color: ManagedColor, x: int, y: int, w: int, h: int) -> QByteArray: ...
    def keyStrokesColors(self) -> list[ManagedColor]: ...
    def limitToDeviceBounds(self) -> bool: ...
    def removeKeyStroke(self, color: ManagedColor) -> None: ...
    def resetCache(self) -> None: ...
    def setCleanUpAmount(self, value: float) -> None: ...
    def setEdgeDetectionSize(self, value: float) -> None: ...
    def setEditKeyStrokes(self, enabled: bool) -> None: ...
    def setKeyStrokePixelData(self, value: QByteArray, color: ManagedColor, x: int, y: int, w: int, h: int) -> bool: ...
    def setLimitToDeviceBounds(self, value: bool) -> None: ...
    def setShowOutput(self, enabled: bool) -> None: ...
    def setUseEdgeDetection(self, value: bool) -> None: ...
    def showOutput(self) -> bool: ...
    def transparencyIndex(self) -> int: ...
    def type(self) -> str: ...
    def updateMask(self, force: bool = False) -> None: ...
    def useEdgeDetection(self) -> bool: ...
    
class FileLayer(Node):
    def path(self) -> str: ...
    def resetCache(self) -> None: ...
    def scalingFilter(self) -> str: ...
    def scalingMethod(self) -> str: ...
    def setProperties(self, fileName: str, scalingMethod: str, scalingFilter: str = "Bicubic") -> None: ...
    def type(self) -> str: ...
    
class FillLayer(Node):
    def filterConfig(self) -> InfoObject: ...
    def generatorName(self) -> str: ...
    def setGenerator(self, generatorName: str, filterConfig: InfoObject) -> bool: ...
    def type(self) -> str: ...
    
class FilterLayer(Node):
    def filter(self) -> Filter: ...
    def setFilter(self, filter: Filter) -> None: ...
    def type(self) -> str: ...
    
class FilterMask(Node):
    def filter(self) -> Filter: ...
    def setFilter(self, filter: Filter) -> None: ...
    def type(self) -> str: ...
    
class GroupLayer(Node):
    def passThroughMode(self) -> bool: ...
    def setPassThroughMode(self, passthrough: bool) -> None: ...
    def type(self) -> str: ...
    
class SelectionMask(Node):
    def selection(self) -> Selection: ...
    def setSelection(self, selection: Selection) -> None: ...
    def type(self) -> str: ...
    
class TransformMask(Node):
    def finalAffineTransform(self) -> QTransform: ...
    def fromXML(self, xml: str) -> bool: ...
    def toXML(self) -> str: ...
    def type(self) -> str: ...
    
class TransparencyMask(Node):
    def selection(self) -> Selection: ...
    def setSelection(self, selection: Selection) -> None: ...
    def type(self) -> str: ...
    
class VectorLayer(Node):
    def addShapesFromSvg(self, svg: str) -> list[Shape]: ...
    def createGroupShape(self, name: str, shapes: list[Shape]) -> Shape: ...
    def shapeAtPosition(self, position: QPointF) -> Shape: ...
    def shapes(self) -> list[Shape]: ...
    def shapesInRect(self, rect: QRectF, omitHiddenShapes: bool = True, containedMode: bool = False) -> list[Shape]: ...
    def toSvg(self) -> str: ...
    def type(self) -> str: ...
